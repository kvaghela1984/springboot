package main.java;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.*;
import java.security.interfaces.RSAPrivateCrtKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.*;
import java.util.Base64;

public class Encryption {

    public static byte[] readFileBytes(String filename) throws IOException
    {
        Path path = Paths.get(filename);
        return Files.readAllBytes(path);
    }

    public static PublicKey getPublicKey(String publicKeyString) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException
    {
        X509EncodedKeySpec publicSpec = new X509EncodedKeySpec(Base64.getDecoder().decode(publicKeyString));
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        return keyFactory.generatePublic(publicSpec);
    }

    public static PrivateKey getPrivateKey(String privateKeyString) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException
    {
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(Base64.getDecoder().decode(privateKeyString));
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        return keyFactory.generatePrivate(keySpec);
    }

    public static byte[] encrypt(PublicKey key, byte[] plaintext) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException
    {
        Cipher cipher = Cipher.getInstance("RSA/ECB/OAEPWithSHA1AndMGF1Padding");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        return cipher.doFinal(plaintext);
    }

    public static byte[] decrypt(PrivateKey key, byte[] ciphertext) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException
    {
        Cipher cipher = Cipher.getInstance("RSA/ECB/OAEPWithSHA1AndMGF1Padding");
        cipher.init(Cipher.DECRYPT_MODE, key);
        return cipher.doFinal(ciphertext);
    }

    public static void main(String[] args)
    {
        try
        {
            /**
             * Using DER Keypair generated by OpenSSL. Refer Readme to understand how to create keys.
             */
            PrivateKey privateKey1 = getPrivateKey(Base64.getEncoder().encodeToString(readFileBytes("private.der")));
            PublicKey publicKey1 = getPublicKey(Base64.getEncoder().encodeToString(readFileBytes("public.der")));

            byte[] message1 = "Encryption Using DER file".getBytes("UTF8");
            byte[] secret1 = Base64.getEncoder().encode(encrypt(publicKey1, message1));
            byte[] recovered_message1 = decrypt(privateKey1, Base64.getDecoder().decode(secret1));

            System.out.println(new String(secret1));
            System.out.println(new String(recovered_message1, "UTF8"));

            /**
             *  Using PEM Keypair generated by OpenSSL
             *  1. openssl genrsa -out rsakey.pem 4096
             *  2. openssl rsa -pubout -in rsakey.pem -out public.pem
             *  3. openssl pkcs8 -topk8 -in rsakey.pem -inform pem -out private.pem -outform pem -nocrypt
             */

            String privateKeyContent = new String(readFileBytes("private.pem"));
            String publicKeyContent = new String(readFileBytes("public.pem"));

            privateKeyContent = privateKeyContent.replaceAll("\\n", "").replace("-----BEGIN PRIVATE KEY-----", "").replace("-----END PRIVATE KEY-----", "");
            publicKeyContent = publicKeyContent.replaceAll("\\n", "").replace("-----BEGIN PUBLIC KEY-----", "").replace("-----END PUBLIC KEY-----", "");;

            PrivateKey privateKey2 = getPrivateKey(privateKeyContent);
            PublicKey publicKey2 = getPublicKey(publicKeyContent);

            byte[] message2 = "Encryption Using PEM file".getBytes("UTF8");
            byte[] secret2 = Base64.getEncoder().encode(encrypt(publicKey2, message2));
            byte[] recovered_message2 = decrypt(privateKey2, Base64.getDecoder().decode(secret2));

            System.out.println(new String(secret2));
            System.out.println(new String(recovered_message2, "UTF8"));

            /**
             *  Using Generated KeyPairGeneator
             */
            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
            keyPairGenerator.initialize(2048);
            KeyPair keyPair = keyPairGenerator.generateKeyPair();

            byte[] message3 = "Encryption Using Key Pair Generator".getBytes("UTF8");
            byte[] secret3 = Base64.getEncoder().encode(encrypt(keyPair.getPublic(), message3));
            byte[] recovered_message3 = decrypt(keyPair.getPrivate(), Base64.getDecoder().decode(secret3));
            System.out.println(new String(secret3));
            System.out.println(new String(recovered_message3, "UTF8"));


            /**
             *  Generate public key from private key and use it to encrypt
             */

            RSAPrivateCrtKey privateKey4 = (RSAPrivateCrtKey)privateKey2; // privateKey2 is obtained from private PEM file. example#2
            RSAPublicKeySpec publicKeySpec = new RSAPublicKeySpec(privateKey4.getModulus(), privateKey4.getPublicExponent());
            KeyFactory keyFactory = KeyFactory.getInstance("RSA");
            PublicKey PublicKey4 = keyFactory.generatePublic(publicKeySpec);
            byte[] message4 = "Encryption Using Public key generated from private key".getBytes("UTF8");
            byte[] secret4 = Base64.getEncoder().encode(encrypt(PublicKey4, message4));
            byte[] recovered_message4 = decrypt(privateKey2, Base64.getDecoder().decode(secret4));
            System.out.println(new String(secret4));
            System.out.println(new String(recovered_message4, "UTF8"));

            /**
             *  Generate Public key to return to client
             *  Verifies that generated public key is working as expected
             */

            byte[] encoded = PublicKey4.getEncoded();
            EncodedKeySpec newpublicKeySpec = new X509EncodedKeySpec(encoded);
            byte[] encoded1 = newpublicKeySpec.getEncoded();
            String generatedPublicKeyString = new String(Base64.getEncoder().encode(encoded1));

            PublicKey generatedPublicKey = getPublicKey(generatedPublicKeyString);
            byte[] message5 = "Encryption Using Public key generated from private key".getBytes("UTF8");
            byte[] secret5 = Base64.getEncoder().encode(encrypt(generatedPublicKey, message5));
            byte[] recovered_message5 = decrypt(privateKey2, Base64.getDecoder().decode(secret5));
            System.out.println(new String(secret5));
            System.out.println(new String(recovered_message5, "UTF8"));

        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }
}
